# ============================================
# CONFIGURACIÓN DE BLOCKCHAIN CARDANO
# ============================================

# BlockFrost Project ID
# Obtén tu API key gratis en: https://blockfrost.io/
# 1. Crea una cuenta
# 2. Crea un nuevo proyecto para "Preview Testnet"
# 3. Copia el Project ID
BLOCKFROST_PROJECT_ID=previewXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Red de Cardano
# Opciones: "preview", "preprod", "mainnet"
# IMPORTANTE: Usar "preview" o "preprod" para desarrollo
NETWORK=preview

# Seed Phrase (24 palabras)
# IMPORTANTE: Esta es tu clave privada - NUNCA la compartas
# NUNCA subas el archivo .env a GitHub
# Genera una nueva con: cardano-wallet recovery-phrase generate
# O usa una existente de tu wallet de testnet
SEED_PHRASE=word1 word2 word3 word4 word5 word6 word7 word8 word9 word10 word11 word12 word13 word14 word15 word16 word17 word18 word19 word20 word21 word22 word23 word24

# ============================================
# CONFIGURACIÓN DEL SMART CONTRACT
# ============================================

# Dirección del contrato (generada al compilar OpShin)
# Esta es la dirección pública del contrato en testnet
SCRIPT_ADDRESS=addr_test1wz873sjp5wenffd4x8jusc94kek42w4mwpuevnagkzkwsqg0j0aty

# Ruta al script Plutus compilado
PLUTUS_SCRIPT_PATH=contracts/opshin/build/humidity_sensor/script.plutus

# ============================================
# CONFIGURACIÓN DE BASE DE DATOS (OPCIONAL)
# ============================================

# PostgreSQL Connection String
# Formato: postgresql://usuario:contraseña@host:puerto/nombre_bd
# Si no se configura, el sistema funcionará solo con blockchain
DATABASE_URL=postgresql://postgres:password@localhost:5432/humidity_sensors

# Habilitar persistencia en base de datos
# true = Guarda en blockchain Y PostgreSQL
# false = Solo blockchain
DB_ENABLED=true

# ============================================
# CONFIGURACIÓN DE LA API
# ============================================

# Puerto del servidor FastAPI
API_PORT=8000

# Host (0.0.0.0 para acceso desde red local, 127.0.0.1 solo local)
API_HOST=127.0.0.1

# Modo debug (true solo en desarrollo)
DEBUG=true

# CORS Origins (separados por coma)
# "*" permite todos los orígenes (solo usar en desarrollo)
CORS_ORIGINS=http://localhost:3000,http://localhost:8000

# ============================================
# CONFIGURACIÓN AVANZADA (OPCIONAL)
# ============================================

# Timeout para transacciones blockchain (segundos)
TX_TIMEOUT=300

# TTL (Time To Live) para transacciones (slots)
# 1 slot ≈ 1 segundo en Cardano
TX_TTL=3600

# Colateral para transacciones (lovelace)
# 5 ADA = 5000000 lovelace
COLLATERAL=5000000

# Fee mínima sugerida (lovelace)
MIN_FEE=200000

# ============================================
# NOTAS IMPORTANTES
# ============================================
#
# 1. NUNCA subas este archivo configurado a GitHub
# 2. Copia este archivo a .env y configura tus valores
# 3. El archivo .env está en .gitignore y no se versionará
# 4. Para testnet, usa solo tADA (test ADA) sin valor real
# 5. Obtén tADA gratis en: https://docs.cardano.org/cardano-testnet/tools/faucet/
#
# Recursos útiles:
# - BlockFrost: https://blockfrost.io/
# - Cardano Explorer Preview: https://preview.cardanoscan.io/
# - Faucet Testnet: https://docs.cardano.org/cardano-testnet/tools/faucet/
# - PyCardano Docs: https://pycardano.readthedocs.io/
# - OpShin Docs: https://opshin.dev/
#
